---
title: "Quarto Demonstration"
author: "Justin Priest"
date: "May 27, 2025"
format:
  html:
    toc: true
    toc-location: left
    toc-expand: 2
editor: visual
execute:
  echo: false
  warning: false
---

# Quarto Overview

## This is just to say...

This is an example Quarto file. This entire document was written in code to demonstrate the utility of such documents. We can use such files to quickly summarize data (especially inseason), and disseminate results. Relying on code, rather than manually creating the file, means that results are dynamic. We can update figures and the file by simply updating the underlying data.  

The background data for this document is from the Situk River weir near Yakutat 
and collections of coho salmon genetic samples collected in 2023. 

1) What kind of reports are created with Quarto? 
To date, most Quarto reports are HTML files created with inseason data. There could be a desire / capability to create more “complete” reports with Quarto, if there were a straightforward publications route.

# Figures

## Generation of Figures

Perhaps the best use case is the automatic generation of figures. This file is created to be an HTML file which means everything can be hyperlinked easily.

```{r importbg}
library(tidyverse)
library(lubridate)
library(janitor)
library(knitr)
library(kableExtra)
library(leaflet)
#library(here)
#rsconnect::writeManifest() #run once/every time you update libraries

situkweir <- read_csv("situkweirdata.csv") %>% 
  clean_names() %>%
  mutate(obs_date = mdy(obs_date),
         obs_day_mm_dd = as.Date(obs_day_mm_dd, format = "%d-%b"))

situksummary <- situkweir %>%
  group_by(year) %>%
  summarise(totalcount = sum(count, na.rm = TRUE))

############
# Now import the map data
cohosamplesites <- read_csv("cohogeneticcollections2023.csv") %>%
  clean_names() %>%
  select(year:sample_count) %>%
  filter(river != "Salmon River")

```

```{r totalyearchart}
#| echo: false
#| label: fig-totyear
#| fig-cap: "Totals by year figure made with ggplot."

ggplot(situksummary, aes(x = year, y = totalcount)) +
  geom_col(fill = "#72a9cf", color = "black") +
  scale_y_continuous(labels=function(x) format(x, big.mark = ",",  scientific = FALSE),
                     breaks = seq(0, 225000, 25000)) +
  labs(x = "Year", y = "Count of sockeye salmon") +
  theme_bw()

counts2020 <- (situksummary %>% filter(year == 2020))$totalcount

```

## Copy Speech... Original Response

We can add summary text here and even dynamically summarize the data with small snippets of summary text written by code. For example, in 2020, at the Situk River weir, there were `{r} prettyNum(counts2020, big.mark = ",")` sockeye salmon.  

As you can see, the headings are also easily created, allowing for simple navigation.

```{r dataparsing}
situkcummcounts <- situkweir %>%
  filter(year >= 2015) %>%
  arrange(year, obs_day_mm_dd) %>%  # Ensure data is sorted by year and day
  group_by(year) %>%
  mutate(cumulative_count = cumsum(count),
         year = as.factor(year)) %>%
  ungroup() 

jsonlite::toJSON(situkcummcounts, dataframe = "rows", pretty = TRUE, auto_unbox = TRUE) |>
  htmltools::tags$script(type = "application/json", id = "json_data")
```

```{r cumulativeyear}
#| label: fig-cumulativeggplot
#| fig-cap: "A static figure made with ggplot."

situkcummcounts %>%
  ggplot(aes(x = obs_day_mm_dd, y = cumulative_count, color = year)) +
  geom_line(linewidth = 2) +
  scale_y_continuous(labels=function(x) format(x, big.mark = ",",  scientific = FALSE),
                     breaks = seq(0, 125000, 25000)) +
  labs(x = "Date", y = "Cumulative count of sockeye salmon") +
  theme_bw()
```

We can quickly add more text too.

Also, since this is a hosted HTML file, we can make things 
*I N T E R A C T I V E.* The plot below is similar to the above but it now has 
some checkboxes to filter the data and also can show numbers when hovered over. 
Notably, this was written in a completely different language than R! 

```{ojs ojsyears}
//| echo: false
//| label: fig-dynam
//| fig-cap: "A dynamic figure made with OJS"

import { Plot } from "@observablehq/plot"


// Parse data from embedded R JSON
raw = JSON.parse(document.getElementById("json_data").textContent)

data = raw.map(d => ({
  date: new Date(d.obs_day_mm_dd),
  year: d.year,
  count: +d.cumulative_count
}))


// All unique years in sorted order
years = [...new Set(data.map(d => d.year))].sort()

// Assign a fixed color palette (adjust if more than 10 years)
colors = d3.schemeTableau10.slice(0, years.length)

// Interactive checkbox to choose babies
viewof selectedyears = Inputs.checkbox(
  [...new Set(data.map(d => d.year))],
  { label: "Select Years", value: [...new Set(data.map(d => d.year))] }
)

// Filter the dataset to selected years
filtered = data.filter(d => selectedyears.includes(d.year))


// plot with lines + hover dots
Plot.plot({
  x: { label: "Date" },
  y: { label: "Cumulative Count" },
  color: {
    domain: years,
    range: colors,
    legend: true
  },
  marks: [
    Plot.line(filtered, {
      x: "date",
      y: "count",
      stroke: "year",
      strokeWidth: 2
    }),
    Plot.dot(filtered, {
      x: "date",
      y: "count",
      fill: "year",
      title: d => `${d.year}: ${d.count}`,
      tip: true  // tooltip only on hover
    })
  ]
})

```

# Tables
## Of Light and the Half Light  
I know what you're thinking, "yadda yadda yadda, figures, pshhh, who needs em. 
Show me some tables!" One of the great parts about tables in HTML is the ability 
to add formatting, search the table yourself, or just highlight rows. 
```{r summarytable}
summarytable <- situkcummcounts %>%
  group_by(year) %>%
  arrange(obs_day_mm_dd) %>%
  mutate(
    total = max(cumulative_count, na.rm = TRUE),
    median_target = total / 2,
    abs_diff = abs(cumulative_count - median_target)) %>%
  summarise(
    weir_start_date = min(obs_date[cumulative_count > 0], na.rm = TRUE),
    weir_end_date = max(obs_date[!is.na(cumulative_count)], na.rm = TRUE),
    season_total = max(cumulative_count, na.rm = TRUE),
    median_date = obs_date[which.min(abs_diff)],
    peak_day = obs_date[which.max(count)],
    peak_count = max(count, na.rm = TRUE))

summarytable %>% 
  kable(digits = 0, format.args = list(big.mark = ","), 
        format = "html", caption = "Run Timing Summary by Year") %>%
  kable_styling(bootstrap_options = c("striped", "hover")) %>%
  column_spec(4, color = "white",
              background = spec_color(summarytable$season_total, end = 0.9))
```


# Map
## A traveller from an antique land
```{r leafletmap}
leaflet(data = cohosamplesites) %>%
  addProviderTiles(providers$Esri.WorldTopoMap) %>%  # change basemap here
  addCircleMarkers(
    ~long, ~lat,
    radius = 5,
    stroke = FALSE,
    fillOpacity = 0.8,
    color = "steelblue",
    popup = ~paste0(
      "<strong>River:</strong> ", river, "<br>",
      "<strong>AWC:</strong> ", awc, "<br>",
      "<strong>Count:</strong> ", sample_count))
```

Creating maps from lat/long data is trivial. Since this is an html document, 
the maps are even interactive. Go ahead and click the points above!  


# Wrapup
## Twice as many stars as usual
